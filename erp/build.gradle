/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_java_projects.html
 */
group 'com.xoa'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'war'
sourceCompatibility = 1.7
webAppDirName = 'WebRoot'    // 设置 WebApp 根目录
// 设置 Java 源码所在目录
sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {

    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public/"
    }
    mavenCentral()
}
// 读取config文件夹中对应的配置文件
ext {
    def prop = new Properties();
    file("src/jdbc-sql.properties")
            .withInputStream {
        prop.load(it)
    }
    file("src/gradle.properties")
            .withInputStream {
        prop.load(it)
    }
    prop.each {
        project.extensions.add("$it.key", it.value);
    }
}
configurations {
    mybatisGenerator
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile fileTree(dir:'WebRoot/WEB-INF/lib',include:['*.jar'])
    compile 'org.slf4j:slf4j-api:1.7.22'
    compile group: 'org.sction', name: 'phprpc', version: '3.0.2'
//    compile group: 'org.springframework', name: 'spring-context', version: '4.3.0.RELEASE'
    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.2'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.38'
}

// 利用ant创建一个自动生成MyBatis目录文件的task
task mybatisGenerate{
    doLast {
        ant.properties['targetProject'] = projectDir.path
        ant.properties['jarDirection'] = project['jdbc.jarDirection']
        ant.properties['driverClass'] = project['driverClassName']
        ant.properties['connectionURL'] = project['url1001']
        ant.properties['userId'] = project['uname1001']
        ant.properties['password'] = project['password1001']
        ant.properties['src_main_java'] = project['mainUrl']
        ant.properties['src_main_resources'] = project['mainUrl']
        ant.properties['modelPackage'] = project['modelPackage']
        ant.properties['mapperPackage'] = project['mapperPackage']
        ant.properties['sqlMapperPackage'] = project['sqlMapperPackage']
        ant.properties['tableName'] = project['tableName']
        ant.properties['className'] = project['className']
        ant.taskdef(
                name: 'mbgenerator',
                classname: 'org.mybatis.generator.ant.GeneratorAntTask',
                classpath: configurations.mybatisGenerator.asPath
        )
        ant.mbgenerator(overwrite: true,
                configfile: 'src/generatorConfig.xml',
                verbose: true) {
            propertyset {
                propertyref(name: 'targetProject')
                propertyref(name: 'jarDirection')
                propertyref(name: 'userId')
                propertyref(name: 'driverClass')
                propertyref(name: 'connectionURL')
                propertyref(name: 'password')
                propertyref(name: 'src_main_java')
                propertyref(name: 'src_main_resources')
                propertyref(name: 'modelPackage')
                propertyref(name: 'mapperPackage')
                propertyref(name: 'sqlMapperPackage')
                propertyref(name: 'tableName')
                propertyref(name: 'className')
            }
        }
    }
}